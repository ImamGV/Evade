local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImamGV/CompKiller/refs/heads/main/Source"))()

local Notifier = Library.newNotify()

local ConfigManager = Library:ConfigManager({
	Directory = "Evade-UI",
	Config = "Evade-Configs"
})

Library:Loader("rbxassetid://95073582077930" , 2.5).yield()

local Window = Library:AddWindow({
	Name = "Evade",
	Keybind = "LeftAlt",
	Logo = "rbxassetid://95073582077930",
	Scale = Library.Scale.Window,
	TextSize = 15,
})

local Watermark = Window:Watermark();

local User = Watermark:AddText({
	Icon = "User",
	Text = game.Players.LocalPlayer.Name,
})

local Clock = Watermark:AddText({
	Icon = "Clock",
	Text = Library:GetDate(),
})

local Time = Watermark:AddText({
	Icon = "Time",
	Text = "...",
})

task.spawn(function()
	while true do task.wait()
		Time:SetText(Library:GetTimeNow())
                Clock:SetText(Library:GetDate())
	end
end)

local PlaceID = Watermark:AddText({
	Icon = "Place ID",
	Text = game.PlaceId,
})

local Tabs = {
Main = Window:DrawTab({Name = "Main Tab", Type = "Single", Icon = "apple", EnableScrolling = true}),
Setting = Window:DrawTab({Name = "Settings Tab", Type = "Single", Icon = "settings-3", EnableScrolling = true}),
}

local Section = {
Farm = Tabs.Main:DrawSection({Name = "Farm"}),
Players = Tabs.Main:DrawSection({Name = "Players"}),
Miscellaneous = Tabs.Main:DrawSection({Name = "Miscellaneous"}),
Visual = Tabs.Main:DrawSection({Name = "Visual"}),
}
local _Part = Instance.new("Part", workspace)
   _Part.Anchored = true
   _Part.CFrame = CFrame.new(100,0,100)
   _Part.Material = "Plastic"
   _Part.Transparency = 0
   _Part.Size = Vector3.new(5,1.2,5)

Section.Farm:AddSlider({
	Name = "Height Farm",
	Min = 1000,
	Max = 3000,
	Default = 1000,
	Round = 0,
	Callback = function(v)
_G.HeightFarm = v
end})
_G.HeightFarm = "1000"
Section.Farm:AddToggle({
	Name = "AFK Farm [BETA]",
	Default = false,
	Callback = function(v)
if v then
AFKFarm = game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(100, _G.HeightFarm, 100)
_Part.CFrame = CFrame.new(100, _G.HeightFarm, 100) - Vector3.new(0,5,0)
end)
else
AFKFarm:Disconnect()
game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart').CFrame = CFrame.new(0, -10000, 0)
end
end})
Section.Farm:AddToggle({
	Name = "Tickets Farm [BETA]",
	Default = false,
	Callback = function(v)
if v then
TicketsFarm = game:GetService("RunService").RenderStepped:Connect(function()
for i, v in next, workspace.Game.Effects.Tickets:GetChildren() do
if v:IsA("BasePart") and v.Name == "HumanoidRootPart" then
game.Players.LocalPlayer.Character.HumanoidRootPart.Position = v.Position - Vector3.new(0, -5, 0)
end
end
end)
else
TicketsFarm:Disconnect()
end
end})
Section.Farm:AddToggle({
	Name = "Cash Farm",
	Default = false,
	Callback = function(v)
if v then
CashFarm = game:GetService("RunService").Stepped:Connect(function()
if game.Players.LocalPlayer and game.Players.LocalPlayer.Character then
for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
if part:IsA("BasePart") then
part.CanCollide = false
end
end
end
for i, v in ipairs(workspace.Game.Players:GetChildren()) do
if v:GetAttribute('Downed') and not v.Name == game.Players.LocalPlayer.Name then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.HumanoidRootPart.Position) - Vector3.new(0,5,0)
game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Character"):WaitForChild("Interact"):FireServer("Revive", true, v.Name)
end
end
end)
else
CashFarm:Disconnect()
end
end})

Section.Players:AddSlider({
	Name = "Fly Speed",
	Min = 50,
	Max = 300,
	Default = 50,
	Round = 0,
	Callback = function(v)
_G.FlySpeed = v
end})
Section.Players:AddToggle({
	Name = "Enabled Fly",
	Default = false,
	Callback = function(v)
_G.Fly = v
if _G.Fly == false then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end
end
while _G.Fly do
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.FlySpeed)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.FlySpeed)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.FlySpeed)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.FlySpeed)
end
elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") == nil and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") == nil then
local bv = Instance.new("BodyVelocity")
local bg = Instance.new("BodyGyro")

bv.Name = "VelocityHandler"
bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bv.MaxForce = Vector3.new(0,0,0)
bv.Velocity = Vector3.new(0,0,0)

bg.Name = "GyroHandler"
bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bg.MaxTorque = Vector3.new(0,0,0)
bg.P = 1000
bg.D = 50
end
task.wait()
end
end})
Section.Players:AddToggle({
	Name = "Always Can Walk",
	Default = false,
	Callback = function(v)
if v then
CanWalk = game:GetService("RunService").RenderStepped:Connect(function()
if workspace.Game.Players:WaitForChild(game.Players.LocalPlayer.Name):GetAttribute('Downed')==true then
workspace.Game.Players:WaitForChild(game.Players.LocalPlayer.Name):SetAttribute('Downed', false)
end
end)
else
CanWalk:Disconnect()
end
end})
Section.Players:AddToggle({
	Name = "Always Respawn",
	Default = false,
	Callback = function(v)
_G.AutoRespawn = value
while _G.AutoRespawn do wait(0.5)
if workspace.Game.Players:WaitForChild(game.Players.LocalPlayer.Name):GetAttribute('Downed') then
game:GetService("ReplicatedStorage").Events.Player.ChangePlayerMode:FireServer(true)
end
end
end})
Section.Players:AddButton({
	Name = "Respawn",
	Callback = function()
game:GetService("ReplicatedStorage").Events.Player.ChangePlayerMode:FireServer(true)
end})

local Settings = Tabs.Setting:DrawSection({
	Name = "UI Settings",
});

Settings:AddToggle({
	Name = "Alway Show Frame",
	Default = false,
	Callback = function(v)
		Window.AlwayShowTab = v;
	end,
});

Settings:AddColorPicker({
	Name = "Highlight",
	Default = Library.Colors.Highlight,
	Callback = function(v)
		Library.Colors.Highlight = v;
		Library:RefreshCurrentColor();
	end,
});

Settings:AddColorPicker({
	Name = "Toggle Color",
	Default = Library.Colors.Toggle,
	Callback = function(v)
		Library.Colors.Toggle = v;
		
		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Drop Color",
	Default = Library.Colors.DropColor,
	Callback = function(v)
		Library.Colors.DropColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Risky",
	Default = Library.Colors.Risky,
	Callback = function(v)
		Library.Colors.Risky = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Mouse Enter",
	Default = Library.Colors.MouseEnter,
	Callback = function(v)
		Library.Colors.MouseEnter = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Block Color",
	Default = Library.Colors.BlockColor,
	Callback = function(v)
		Library.Colors.BlockColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Background Color",
	Default = Library.Colors.BGDBColor,
	Callback = function(v)
		Library.Colors.BGDBColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Block Background Color",
	Default = Library.Colors.BlockBackground,
	Callback = function(v)
		Library.Colors.BlockBackground = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Stroke Color",
	Default = Library.Colors.StrokeColor,
	Callback = function(v)
		Compkiller.Colors.StrokeColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "High Stroke Color",
	Default = Library.Colors.HighStrokeColor,
	Callback = function(v)
		Library.Colors.HighStrokeColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Switch Color",
	Default = Library.Colors.SwitchColor,
	Callback = function(v)
		Library.Colors.SwitchColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

Settings:AddColorPicker({
	Name = "Line Color",
	Default = Library.Colors.LineColor,
	Callback = function(v)
		Library.Colors.LineColor = v;

		Library:RefreshCurrentColor(v);
	end,
});

ThemeTab:DrawSection({
	Name = "UI Themes"
}):AddDropdown({
	Name = "Select Theme",
	Default = "Default",
	Values = {
		"Default",
		"Dark Green",
		"Dark Blue",
		"Purple Rose",
		"Skeet"
	},
	Callback = function(v)
		Library:SetTheme(v)
	end
})

-- Creating Config Tab --
local ConfigUI = Window:DrawConfig({
	Name = "Config",
	Icon = "folder",
	Config = ConfigManager
});

ConfigUI:Init();


























